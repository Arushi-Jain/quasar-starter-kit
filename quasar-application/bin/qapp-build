#!/usr/bin/env node

// logs
process.env.DEBUG = process.env.DEBUG || 'qapp:*'
const debug = require('debug')('qapp:build')
debug.color = 2 // force green color

// cli deps
const
  parseArgs = require('minimist'),
  path = require('path'),
  chalk = require('chalk'),
  webpack = require('webpack')

const
  appPaths = require('./lib/app-paths'),
  resolve = path.resolve

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    t: 'theme',
    m: 'mode',
    d: 'debug',
    c: 'config-file',
    h: 'help'
  },
  boolean: ['h', 'd'],
  string: ['t', 'm', 'c'],
  default: {
    t: 'mat',
    m: 'spa',
    c: 'quasar.conf.js'
  }
})

if (argv.help) {
  console.log(`
    Description
      Starts the app in development mode (hot-code reloading, error
      reporting, etc)
    Usage
      $ quasar dev -p <port number>
    Options
      --theme, -t         App theme (default: mat)
      --mode, -m          App mode (default: spa)
      --debug, -d         Add sourcemaps etc
      --config-file, -c   Path to Quasar config file (default: quasar.config.js)
      --help, -h          Displays this message
  `)
  process.exit(0)
}

const
  quasarConfig = new QuasarConfig({
    filename: argv['config-file']
    theme: argv.theme,
    mode: argv.mode,
    port: argv.port,
    prod: true,
    debug: argv.debug
  }),
  webpackConfig = quasarConfig.getWebpackConfig(),
  ctx = quasarConfig.getQuasarConfigCtx()

console.log(chalk.bold(' WARNING!'))
console.log(' Do NOT use VueRouter\'s "history" mode if')
console.log(' building for Cordova or Electron.\n')

console.log(chalk.bold(` Building Quasar App with "${ctx.build.themeName}" theme...\n`))

webpack(webpackConfig, (err, stats) => {
  if (err) throw err

  process.stdout.write(stats.toString({
    colors: true,
    modules: false,
    children: false,
    chunks: false,
    chunkModules: false
  }) + '\n')

  if (stats.hasErrors()) {
    console.log(chalk.red(' Build failed with errors.\n'))
    process.exit(1)
  }

  console.log(chalk.cyan(
    `\n Build complete with "${chalk.bold(ctx.build.themeName)}" theme in "${chalk.bold(ctx.build.distDir)}" folder.\n`
  ))

  console.log(chalk.bold(' Built files are meant to be served over an HTTP server.'))
  console.log(chalk.bold(` Opening ${ctx.build.htmlFilename} over file:// won't work.`))

  if (ctx.build.debug) {
    console.log(chalk.cyan(
      '\n Built for ' + chalk.bold('DEBUG') +
      '\n - Do NOT deploy this version to production.'
    ))
  }
})
