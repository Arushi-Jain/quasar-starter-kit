#!/usr/bin/env node

// cli deps
const
  parseArgs = require('minimist'),
  path = require('path'),
  chalk = require('chalk')

const
  log = require('../lib/helpers/logger')('app:dev')
  appPaths = require('../lib/build/app-paths'),
  resolve = path.resolve,
  ensureArgv = require('../lib/helpers/ensure-argv')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    t: 'theme',
    m: 'mode',
    T: 'target',
    p: 'port',
    H: 'hostname',
    c: 'config-file',
    h: 'help'
  },
  boolean: ['h'],
  string: ['t', 'm', 'T', 'H', 'c'],
  default: {
    t: 'mat',
    m: 'spa',
    p: process.env.PORT || 8080,
    H: 'localhost',
    c: 'quasar.conf.js'
  }
})

if (argv.help) {
  console.log(`
    Description
      Starts the app in development mode (hot-code reloading, error
      reporting, etc)
    Usage
      $ npm run dev -p <port number>
    Options
      --theme, -t         App theme (default: mat)
      --mode, -m          App mode [spa|pwa|cordova|electron] (default: spa)
      --target, -T        App target [if cordova mode: android|ios; if electron: darwin|win32|linux]
      --port, -p          A port number on which to start the application
      --hostname, -h      A hostname to use for serving the application
      --config-file, -c   Path to Quasar config file (default: quasar.config.js)
      --help, -h          Displays this message
  `)
  process.exit(0)
}

ensureArgv(argv)

log(`Mode [ ${chalk.red(argv.mode.toUpperCase())} ] with [ ${chalk.red(argv.theme.toUpperCase())} ] theme`)

const
  DevServer = require('../lib/dev-server'),
  QuasarConfig = require('../lib/quasar-config'),
  Generator = require('../lib/generator')

const
  onCordova = argv.mode === 'cordova',
  quasarConfig = new QuasarConfig({
    filename: argv['config-file'],
    theme: argv.theme,
    mode: argv.mode,
    target: argv.target,
    port: argv.port,
    host: argv.hostname,
    dev: true,
    onBuildChange () {
      log(`Rebuilding app...`)
      dev = dev.then(startDev)
    },
    onAppChange () {
      log(`Updating app...`)
      generator.build()
    }
  }),
  generator = new Generator(quasarConfig)

function startDev (oldDevServer) {
  const devServer = new DevServer(quasarConfig)

  return Promise.resolve()
    .then(() => cordovaApp ? cordovaApp.stop() : Promise.resolve())
    .then(() => oldDevServer ? oldDevServer.stop() : Promise.resolve()) // Close old builder after successful build
    .then(() => generator.build()) // Update generated files
    .then(() => devServer.listen()) // Start listening
    .then(() => cordovaApp ? cordovaApp.start(quasarConfig) : Promise.resolve())
    .then(() => devServer) // Pass new builder to watch chain
}

let cordovaApp = false
if (argv.mode === 'cordova') {
  const
    CordovaApp = require('../lib/cordova/cordova-app'),
    onShutdown = require('../lib/helpers/on-shutdown')

  cordovaApp = new CordovaApp()
  onShutdown(() => {
    cordovaApp.stop()
  })
}

let dev = startDev()
