#!/usr/bin/env node

// logs
process.env.DEBUG = process.env.DEBUG || 'qapp:*'
const debug = require('debug')('qapp:dev')
debug.color = 2 // force green color

// cli deps
const
  parseArgs = require('minimist'),
  path = require('path')

const
  appPaths = require('../lib/app-paths'),
  resolve = path.resolve

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    t: 'theme',
    m: 'mode',
    p: 'port',
    H: 'hostname',
    c: 'config-file',
    h: 'help'
  },
  boolean: ['h'],
  string: ['t', 'm', 'H', 'c'],
  default: {
    t: 'mat',
    m: 'spa',
    c: 'quasar.conf.js'
  }
})

if (argv.help) {
  console.log(`
    Description
      Starts the app in development mode (hot-code reloading, error
      reporting, etc)
    Usage
      $ quasar dev -p <port number>
    Options
      --theme, -t         App theme (default: mat)
      --mode, -m          App mode (default: spa)
      --port, -p          A port number on which to start the application
      --config-file, -c   Path to Quasar config file (default: quasar.config.js)
      --help, -h          Displays this message
  `)
  process.exit(0)
}

const
  DevServer = require('../lib/dev-server'),
  QuasarConfig = require('../lib/quasar-config'),
  quasarConfig = new QuasarConfig({
    filename: argv['config-file'],
    theme: argv.theme,
    mode: argv.mode,
    port: argv.port,
    dev: true,
    debug: true,
    watch () {
      dev = dev.then(startDev)
    }
  })

function startDev (oldDevServer) {
  const devServer = new DevServer(quasarConfig)

  return Promise.resolve()
    .then(() => devServer.build()) // Start build
    .then(() => oldDevServer ? oldDevServer.stop() : Promise.resolve()) // Close old builder after successful build
    .then(() => devServer.listen()) // Start listening
    .then(() => devServer) // Pass new builder to watch chain
}

let dev = startDev()
